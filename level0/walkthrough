# Решение

level0@RainFall:~$ ./level0 423
$ cd ../level1
$ cat .pass
1fe8***d3a

# Объяснение

1. Оцениваем поведение.

- Вызов без аргументов
level0@RainFall:~$ ./level0
Segmentation fault (core dumped)

- Вызов в аргументом
level0@RainFall:~$ ./level0 1
No !

Вывод: Предполагаем, что программа должна принимать какой-то специфический аргумент, чтобы пройти внутри
некую логическую проверку, дабы получить результат.

2. Дизассемблируем с помощью GDB
level0@RainFall:~$ gdb level0
(gdb) disas main

Нас заинтересовали строки:
   0x08048ed4 <+20>:	call   0x8049710 <atoi>
   0x08048ed9 <+25>:	cmp    $0x1a7,%eax
   0x08048ede <+30>:	jne    0x8048f58 <main+152>
Тут вызывается atoi, затем сравнивается значение, полученное из atoi, с 0x1a7(423).
В случае, если значения не равны, мы попадаем в строки:
   0x08048f58 <+152>:	mov    0x80ee170,%eax
   0x08048f5d <+157>:	mov    %eax,%edx
   0x08048f5f <+159>:	mov    $0x80c5350,%eax
   0x08048f64 <+164>:	mov    %edx,0xc(%esp)  // 4 аргумент (x/1cb $esp+0xc) -96 <stderr>
   0x08048f68 <+168>:	movl   $0x5,0x8(%esp)  // 3 аргумент (x/1cb $esp+0x8) 5
   0x08048f70 <+176>:	movl   $0x1,0x4(%esp)  // 2 аргумент (x/1cb $esp+0x4) 1
   0x08048f78 <+184>:	mov    %eax,(%esp)     // 1 аргумент (x/4x $esp x/5b 0x80c5350) "No !'n
=> 0x08048f7b <+187>:	call   0x804a230 <fwrite>

И нв выводе программы получаем "No !"

Если же мы предоставим программе аргумент 423, то попадем в иную логическую ветку.
Тут нас интересуют строки.
   0x08048f4a <+138>:	movl   $0x80c5348,(%esp)
=> 0x08048f51 <+145>:	call   0x8054640 <execv>

Посмотрим, что попадает на стек с помощью инструкции movl (l - long - 8 байт).
(gdb) x/8cb 0x80c5348
0x80c5348:	47 '/'	98 'b'	105 'i'	110 'n'	47 '/'	115 's'	104 'h'	0 '\000'

Использование функции execv с аргументом "/bin/sh" для запуска BASH с правами level1.

Вывод: с помощью дизассемблирования мы смогли понять, какой аргумент требуется программе, чтобы мы попали в ветку
выполнения, где вызывается bash от имени level1.